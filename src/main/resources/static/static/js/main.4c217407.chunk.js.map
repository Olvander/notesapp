{"version":3,"sources":["components/TopNav.js","components/Note.js","components/SideBar.js","components/DisplayOneNote.js","components/AddNote.js","components/EditNote.js","components/App.js","serviceWorker.js","index.js"],"names":["TopNav","props","state","clickedNoteId","addNoteClicked","bind","removeNoteClicked","editNoteClicked","this","setState","nextProps","nextState","nextContext","undefined","e","onClick","className","name","Component","Note","text","date","SideBar","map","notes","lastNoteId","firstNoteId","loadComplete","fetchNotes","lastOneLoaded","formatDateTime","prevProps","prevState","snapshot","reloadNotes","updateSideBar","fetch","res","status","json","requestBody","length","b","notesHaveLoaded","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","Date","parse","note","noteX","key","id","noteClicked","DisplayOneNote","display","fetchNote","clear","method","headers","body","AddNote","manageSubmit","manageTextChange","event","preventDefault","JSON","stringify","setMainPage","target","value","onSubmit","placeholder","onChange","type","EditNote","rows","cols","App","displayOneNote","currentNoteId","displayNote","setMainPageWithNote","noteId","currentPage","response","item","removeNote","editNote","topNavClicked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c217407.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport '../styles/TopNav.css';\r\n\r\nclass TopNav extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            clickedNoteId: props.clickedNoteId\r\n        };\r\n\r\n        this.addNoteClicked = this.addNoteClicked.bind(this);\r\n        this.removeNoteClicked = this.removeNoteClicked.bind(this);\r\n        this.editNoteClicked = this.editNoteClicked.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            clickedNoteId: this.props.clickedNoteId\r\n        });\r\n    }\r\n\r\n    async shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n\r\n        if (this.state.clickedNoteId !== nextProps.clickedNoteId) {\r\n            if (nextProps.clickedNoteId !== undefined && nextProps.clickedNoteId > 0) {\r\n                await this.setState({\r\n                    clickedNoteId: nextProps.clickedNoteId\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    addNoteClicked(e) {\r\n        this.props.onClick(\"Add a Note\");\r\n    }\r\n\r\n    removeNoteClicked(e) {\r\n        if (this.state.clickedNoteId > 0) {\r\n            this.props.onClick(\"Remove Note\");\r\n        }\r\n    }\r\n\r\n    editNoteClicked(e) {\r\n        if (this.state.clickedNoteId > 0) {\r\n            this.props.onClick(\"Edit Note\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"topNavDiv\">\r\n                <div className=\"topNavContainer\">\r\n                    <div>\r\n                        <button\r\n                            onClick={this.addNoteClicked}\r\n                            name=\"addBtn\"\r\n                            className=\"addNoteBtn\"\r\n                        >Add a Note</button>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <button\r\n                            className=\"removeBtn\"\r\n                            onClick={this.removeNoteClicked}\r\n\r\n                        >Remove Note</button>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <button\r\n                            className=\"editBtn\"\r\n                            onClick={this.editNoteClicked}\r\n                        >Edit Note</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopNav;","import React, {Component} from \"react\";\r\nimport '../styles/Note.css';\r\n\r\nclass Note extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"noteDiv\">\r\n                <div className=\"noteText\">\r\n                    {this.props.text}\r\n                </div>\r\n                <div className=\"noteDate\">\r\n                    {this.props.date}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Note;","import React, {Component} from 'react';\r\nimport Note from './Note';\r\nimport '../styles/SideBar.css';\r\n\r\nclass SideBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            map: [],\r\n            notes: [],\r\n            lastNoteId: -1,\r\n            firstNoteId: -1,\r\n            loadComplete: false,\r\n        };\r\n\r\n        this.fetchNotes = this.fetchNotes.bind(this);\r\n        this.lastOneLoaded = this.lastOneLoaded.bind(this);\r\n        this.formatDateTime = this.formatDateTime.bind(this);\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.reloadNotes && !this.state.loadComplete ) {\r\n            await this.fetchNotes();\r\n            await this.updateSideBar();\r\n        } else if (!this.props.reloadNotes && this.state.loadComplete) {\r\n            await this.setState({loadComplete: false});\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidMount(props) {\r\n        await this.fetchNotes();\r\n    }\r\n\r\n    async fetchNotes() {\r\n        const res = await fetch('/api/notes');\r\n        if (res.status !== 404) {\r\n            const requestBody = await res.json();\r\n\r\n            if (requestBody.length === 0) {\r\n                if (this.state.notes.length !== 0) {\r\n                    this.setState({\r\n                        notes: [],\r\n                    });\r\n                    this.lastOneLoaded(true);\r\n                }\r\n            }\r\n            else if (!this.state.loadComplete) {\r\n                this.setState({\r\n                    notes: requestBody,\r\n                });\r\n            }\r\n        } else {\r\n            await this.setState({\r\n                lastNoteId: -1,\r\n                firstNoteId: -1,\r\n                notes: [],\r\n            }, () => {\r\n                this.lastOneLoaded(true);\r\n                this.updateSideBar();});\r\n        }\r\n    }\r\n\r\n\r\n    lastOneLoaded(b) {\r\n\r\n        if (b) {\r\n            this.setState({loadComplete: true});\r\n            this.props.notesHaveLoaded(true, this.state.firstNoteId);\r\n        } else {\r\n            this.props.notesHaveLoaded(false, this.state.firstNoteId);\r\n            this.updateSideBar();\r\n        }\r\n    }\r\n\r\n    formatDateTime(date) {\r\n        var dateTime =  Intl.DateTimeFormat('en-US', {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: false,\r\n        }).format(Date.parse(date));\r\n\r\n        return dateTime;\r\n    }\r\n\r\n    async updateSideBar() {\r\n        this.setState({\r\n            map: await this.state.notes.map(note => {\r\n                    const noteX = note;\r\n                    return (\r\n                        <li key={noteX.id} onClick={() => this.props.noteClicked(noteX.id)}\r\n                        >\r\n                            <Note\r\n                                id={noteX.id}\r\n                                date={this.formatDateTime(noteX.date)}\r\n                                text={noteX.text}\r\n                            />\r\n                            <br/>\r\n                        </li>)\r\n                }\r\n            )\r\n        }, () => {\r\n            if (this.state.map.length > 0) {\r\n                this.setState({\r\n                    lastNoteId: this.state.map[this.state.map.length - 1].id,\r\n                    firstNoteId: this.state.map[0].id,\r\n                }, () => this.lastOneLoaded(true));\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.map) {\r\n            return (\r\n                <div className=\"sideBarDiv\">\r\n                    <nav className=\"sideBarNav\">\r\n                        <ul>\r\n                            {this.state.map}\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default SideBar;","import React, {Component} from 'react';\r\nimport '../styles/DisplayOneNote.css';\r\n\r\nclass DisplayOneNote extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            note: {},\r\n            props: this.props,\r\n            display: true\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.display && this.props.id > 0) {\r\n            this.fetchNote();\r\n        }\r\n\r\n        if (this.props.clear && this.state.note !== '') {\r\n            await this.setState( {\r\n                note: '',\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidMount(props) {\r\n        if (this.props.display && this.props.id > 0) {\r\n            this.fetchNote();\r\n        }\r\n    }\r\n\r\n    async fetchNote() {\r\n        const id = this.props.id;\r\n\r\n        const res = await fetch('/api/notes/' + id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        if (res.status !== 404) {\r\n            const body = await res.json();\r\n            body.date = this.formatDateTime(body.date);\r\n\r\n            if (body.text !== undefined && body.text.length > 0) {\r\n                if (this.state.note.id !== body.id) {\r\n                    await this.setState({note: body});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    formatDateTime(date) {\r\n        var dateTime =  Intl.DateTimeFormat('en-US', {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: false,\r\n        }).format(Date.parse(date));\r\n\r\n        return dateTime;\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.clear) {\r\n            return (\r\n                <div className=\"displayOneNoteDiv\">\r\n                    <div className=\"oneNoteContainer\">\r\n                        <div className=\"displayTextDiv\">\r\n                            <div className=\"displayOneNoteContainer\">\r\n                                <div className=\"textOfOneNoteDiv\">\r\n                                    {this.state.note.text}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dateOfOneNoteDiv\">\r\n                            {this.state.note.date ? 'Updated: ' : ''}\r\n                            {this.state.note.date}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n\r\nexport default DisplayOneNote;","import React, {Component} from 'react';\r\nimport '../styles/AddNote.css';\r\n\r\nclass AddNote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: ''\r\n        };\r\n\r\n        this.manageSubmit = this.manageSubmit.bind(this);\r\n        this.manageTextChange = this.manageTextChange.bind(this);\r\n    }\r\n\r\n    async manageSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.state.text !== '') {\r\n            const res = await fetch('/api/notes/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({'text': this.state.text})\r\n            });\r\n            const body = await res.json();\r\n            this.props.setMainPage(body);\r\n        }\r\n    }\r\n\r\n    manageTextChange(event) {\r\n        event.preventDefault();\r\n        this.setState({text: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addNoteDiv\">\r\n                <form\r\n                    name=\"addNoteForm\"\r\n                    onSubmit={this.manageSubmit}\r\n                >\r\n                    <textarea\r\n                        className=\"addText\"\r\n                        name=\"addText\"\r\n                        placeholder=\"Type your note here...\"\r\n                        onChange={this.manageTextChange}\r\n                    />\r\n                    <br/>\r\n                    <input\r\n                        className=\"submitAddBtn\"\r\n                        name=\"submitBtn\"\r\n                        type=\"submit\"\r\n                        value=\"Add note\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNote;","import React, {Component} from 'react';\r\nimport '../styles/EditNote.css';\r\n\r\nclass EditNote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: this.props.text,\r\n        };\r\n\r\n        this.manageSubmit = this.manageSubmit.bind(this);\r\n        this.manageTextChange = this.manageTextChange.bind(this);\r\n    }\r\n\r\n    async manageSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.state.text !== '') {\r\n            const res = await fetch('/api/notes/' + this.props.id, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({'text': this.state.text})\r\n            });\r\n            if (res.status !== 404) {\r\n                const body = await res.json();\r\n                await this.props.setMainPage(body);\r\n            }\r\n        }\r\n    }\r\n\r\n    manageTextChange(event) {\r\n        event.preventDefault();\r\n        this.setState({text: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editNoteDiv\">\r\n                <form\r\n                    name=\"editNoteForm\"\r\n                    onSubmit={this.manageSubmit}\r\n                >\r\n                    <textarea\r\n                        className=\"editText\"\r\n                        name=\"editText\"\r\n                        placeholder=\"Type your note here...\"\r\n                        onChange={this.manageTextChange}\r\n                        rows = \"10\"\r\n                        cols = \"25\"\r\n                        value={this.state.text}\r\n                    />\r\n                    <br/>\r\n                    <input\r\n                        className=\"submitEditBtn\"\r\n                        name=\"submitBtn\"\r\n                        type=\"submit\"\r\n                        value=\"Save Changes\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditNote;","import React, {Component} from 'react';\nimport '../styles/App.css';\nimport TopNav from './TopNav';\nimport SideBar from './SideBar';\nimport DisplayOneNote from './DisplayOneNote';\nimport AddNote from \"./AddNote\";\nimport EditNote from './EditNote';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayOneNote: false,\n      currentNoteId: -1,\n      reloadNotes: false,\n    };\n\n    this.notesHaveLoaded = this.notesHaveLoaded.bind(this);\n    this.displayNote = this.displayNote.bind(this);\n    this.setMainPageWithNote = this.setMainPageWithNote.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({reloadNotes: true});\n  }\n\n  notesHaveLoaded(b, noteId) {\n    if (noteId !== undefined) {\n      this.setState({\n        currentNoteId: noteId,\n      });\n    }\n    this.setState({\n      reloadNotes: !b,\n      currentPage: noteId <= 0 ? '' : <DisplayOneNote clear={!b}\n                                                      id={noteId}\n                                                      display={true}/>,\n    });\n  }\n\n  displayNote(noteId) {\n    this.setState({\n      currentPage: <DisplayOneNote   clear={false}\n                                     id={noteId}\n                                     display={true}/>,\n    });\n    if (noteId !== undefined) {\n      this.setState({\n        currentNoteId: noteId,\n      });\n    }\n  }\n\n  async editNote(id) {\n    const res = await fetch('/api/notes/' + id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const body = await res.json();\n    this.setState({currentPage: <EditNote id={id}\n                                          text={body.text}\n                                          setMainPage={(note) => this.setMainPageWithNote(note)}/>});\n  }\n\n  async removeNote(id) {\n    const response = await fetch('/api/notes/' + id, {\n      method: 'DELETE',\n    });\n    return response.status;\n  }\n\n  async setMainPageWithNote(note) {\n    if (note.id !== undefined) {\n      await this.setState({\n        currentNoteId: note.id\n      });\n      await this.notesHaveLoaded(false, note.id);\n    }\n  }\n\n  async topNavClicked(item) {\n    if (item === \"Add a Note\") {\n      this.setState({\n        currentPage: <AddNote setMainPage={(note) => this.setMainPageWithNote(note)}/>\n      });\n    } else if (item === \"Remove Note\") {\n      if (this.state.currentNoteId !== undefined) {\n        const statusCode = await this.removeNote(this.state.currentNoteId);\n\n        if (statusCode === 404) {\n        } else {\n          let noteId = this.state.currentNoteId;\n          await this.notesHaveLoaded(false, noteId);\n        }\n      }\n\n    } else if (item === \"Edit Note\") {\n      if (this.state.currentNoteId !== -1 && this.state.currentNoteId !== undefined) {\n        await this.editNote(this.state.currentNoteId);\n      }\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <TopNav onClick={ (item) => this.topNavClicked(item)}\n                  clickedNoteId={this.state.currentNoteId}/>\n          <div className=\"middleDiv\">\n            <SideBar reloadNotes={this.state.reloadNotes}\n                     notesHaveLoaded={(b, noteId) => this.notesHaveLoaded(b, noteId)}\n                     noteClicked={ (note) => this.displayNote(note)}/>\n            <div className=\"currentPageDiv\">\n              <div className=\"currentPageContainer\">\n                {this.state.currentPage}\n              </div>\n            </div>\n          </div>\n          <div className=\"bottomPageContainer\">\n\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}